  // SIOD compatibility checklist:
  //
  // TODO benchmark fns -- http://people.delphiforums.com/gjc//siod.html#builtin
  // (realtime)
  //      Returns a double precision floating point value representation of the current realtime number of seconds. Usually precise to about a thousandth of a second.
  // errobj, (error message object)
  // (number->string x base width precision)
  //     Formats the number according to the base, which may be 8, 10, 16 or the symbol e or f.
  //     The width and precision are both optional.
  // (parse-number str)
  // (print object stream) -- Same as prin1 followed by output of a newline.
  // (rand modulus) -- Computes a random number from 0 to modulus-1. Uses C library rand. (srand seed)
  // (random modulus) -- Computes a random number from 0 to modulus-1. Uses C library random. (srandom seed)
  // (runtime)
  //     Returns a list of containing the current cpu usage in seconds and the subset amount of cpu time
  //     that was spent performing garbage collection during the currently extant read-eval-print loop cycle.
  // (save-forms filename forms how)
  //    Prints the forms to the file, where how can be "w" (default) or "a" to append to the file.
  // (sdatref spec data) -- Used as the %%closure-code by mkdatref.
  // (set! variable value)
  //    A special form that evaluates the value subform to get a value, and then assigns the variable
  //    to the value.  ??? where ???
  // (set-symbol-value! symbol value env)
  //    Finds the location of the value cell for the specified symbol in the environment env and sets the value.
  // (strbreakup string sep)
  //    Return a list of the portions of string indicated by the separator.
  // (unbreakupstr list sep) -- The reverse of strbreakup.
  // (string-append str1 str2 str3 ...) -- same as +
  // (string->number str radix)
  // (string-downcase str) -- also string-downcase
  //    Return a new string converting all the characters of str to lowercase.
  // (string-length str)
  //    Returns the active string length of str.
  // (string-lessp str1 str2)
  //    Return true if str1 is alphabetically less than str2.
  // (string-search key str)
  //    Locate the index of the key in the specified string. Returns () if not found.
  // (string-trim str)
  //    Return a new string made by trimming whitespace from the left and right of the specified string.
  // (string-trim-left str)
  //    Like string-trim but only the left hand side.
  // (string-trim-right str)
  //    Like string-trim but only the right hand side.
  // (string-upcase str)
  //    Returns a new string with all the lowercase characters converted to uppercase.
  // (string? x)
  //    Returns true if x is a string.
  // (strspn str indicators)
  //    Returns the location of the first character in str which is not found in the indicators set, returns the length of the str if none found. For example:
  //    (define (string-trim-left x)
  //       (substring x (strspn x " \t")))
  // (subset pred-fcn list) -- aka filter?
  //    Return the subset of the list such that the elements satisify the pred-fcn. For example:
  //    (subset number? '(1 b 2 c)) => (1 2)
  // (substring str start end)
  //    Returns a new string made up of the part of str begining at start and terminating at end. In other words, the new string has a length of end - start.
  // (substring-equal? str str2 start end)
  //    An efficient way to determine if the substring of str2 specified by start and end is equal to str1.
  // (symbol-bound? symbol env)
  //    Returns true of the symbol is bound in the environment.
  // (symbol-value symbol env)
  //    Returns the value of the symbol in the environment.
  // (symbol? x)
  //    Returns true if x is a symbol.
  // (symbolconc arg1 arg2 ...)
  //    Slightly more efficient than calling intern on the result of using string-append on the arguments. This procedure actually predates the availability of the string data type in SIOD.
  // t -- Please do not change the global value of this variable, bound to a true value.
  // (tan x)
  // (the-environment) -- A special form which returns the interpreter environment structure for the current lexical scope.
  // (trunc x) -- Returns the integer portion of x.
  // (typeof x) -- Returns a symbol describing the type of the object x, or the integer type code. Hmmm
  // (unix-ctime x) -- Converts the integer time x into a string. U
  // (unix-time) -- Returns the current number of seconds since 1-JAN-1970 GMT. U
  // (unix-time->strtime x) Returns a string of the form "YYYYMMDDHHmmSSdd" which is useful in some contexts. This predates the availability of the strftime procedure.
  // (url-decode str)
  //    Performs the url decode operation on the str. See chtml.html for example usage.
  // (url-encode str)
  //    Locates characters in the str which should not appear in a url, and returns a new string where they have been converted to the %NN hex representation. Spaces are converted to "+" signs.
  // (verbose arg)
  //    Sets the verbosity level of SIOD to the specified level or returns the current level if not specified.
  //    Verbose Level	Effect on System
  //      0 No messages.
  //      1 Error messages only.
  //      2 Startup messages, prompts, and evaluation timing.
  //      3 File loading and saving messages.
  //      4 (default)	Garbage collection messages.
  //      5 display of data loaded from files and fetched from databases.
  // (while pred-form form1 form2 ...)
  //    If pred-form evaluates true it will evaluate all the other forms and then loop.


///////

pass 2:
http://www.nongnu.org/muesli/ulsiod.html

*args*
A variable, bound to the list of arguments passed to the main program siod.

*env*
A variable, bound to the list of environment values passed to the main program siod.

(// x1 x2 ...)
Returns the integer quotient of the first argument and the second.

(array->hexstr string)
Takes a string or byte array and returns a string in representing the values of the elements in hex.

(array->hexstr string)
Takes a string or byte array and returns a string in representing the values of the elements in hex.

(aset array index value) // test this
Stores the value at the given index in the array.

(ass key alist function)
Returns the first element of the alist such that the function applied to car of the element and the key returns a non-null value. For example:
(define (assq x alist) (ass x alist eq?))

(assoc key alist)
same as (ass key alist equal?).

(assq key alist)
same as (ass key alist eq?).

(assv key alist)
same as (ass key alist eql?).

(base64decode x)
Given a string X in base64 representation returns a string with bytes computed using the base64 decoding algorithm. See rfc1521.txt.

(base64encode x)
Returns a string computed using the base64 encoding algorithm.

(benchmark-eval nloops exp env)
A zero-overhead way of evaluating the exp n times.

(benchmark-funcall1 nloops f arg1)
A zero-overhead way of calling the function f n times on arg1.

(benchmark-funcall2 nloops f arg1 arg2)
A zero-overhead way of calling the function f n times on arg1 and arg2.

// XXX seems like a different theory, but maybe can give interpretation
(bytes-append x1 x2 ...)
Returns a new byte array by appending its arguments which may be strings or byte arrays.

// problematic; maybe in node?
(chdir path)
Changes default directory to path. (unix-based).

(chmod path mode)
Changes the file mode of path. (unix-based). For example, to add execute access permission to the file f:
(chmod f
      (encode-file-mode (append '(XUSR XGRP XOTH)
      (cdr (assq 'mode (stat f))))))

(chown path uid gid)
Changes file ownership. (unix-based).

(closedir stream)
Closes a directory stream. (unix-based).

(copy-list x)
The toplevel cons objects of x are copied, returning a new list.

(delq element list)
Deletes the elements of the list which are eq to its first argument. Possibly modifying the list using the set-cdr! operation.

(env-lookup indentifier environment)
Returns an object such that the car is the location where the value of identifier is stored.

(eof-val)
Returns the object returned by read upon encountering and end of file condition.
(eq? x y)

Returns true if x and y are the same object.

(equal? x y)
Returns true if x and y are equal objects.

(exit status)
Calls exit (unix-based).

(fmod x y)
Floating point mod. (unix-based).

(fnmatch pattern string flags)
Returns true if the string matches the pattern. (unix-based).

(gc)
Invokes the garbage collector.  // no-op, but what does it return?

(gc-info item)
Returns information about the garbage collector.
Item	Value
0	true if copying gc, false if mark and sweep
1	number of active heaps
2	maximum number of heaps
3	number of objects per heap
4	amount of consing of objects before next gc
5	number of gcs so far

(gc-messages [flag])
If flag is not specified prints information about the gc. Otherwise flag can be used to turn on or off gc messages.

(gc-status [flag])
If flag is not specified prints information about the gc. Otherwise flag can be used to turn on or off the gc itself when in stop and copy mode.

(get object key)   // XXX seems relevent to JS
Returns the key property of the object.

(getenv name)   // XXX maybe just in node?
Returns the value of the environment variable named, or (). (unix-based).

(hexstr->bytes str)
Decodes the hex representation into a byte array.

(href table key)
The hash table is a one dimensional array of association lists.
(define (href table key)
    (cdr (assoc key
    (aref table (sxhash key (length table))))))

(hset table key value)
Stores the value into the hash table slot indicated by key.

(html-encode str)
If str contains any special html characters (<>&) a new string is returned with these replaced by their corresponding representations &lt; &gt; &amp;.

(larg-default list index default-value)
Reference the list according to index, but skipping over strings that begin with a colon or a dash. If the list is not long enough it returns the default-value instead. Most useful when used with the *args* variable inside a main program.

(lref-default list index default-fcn)
Returns the index element of the list or the result of calling the default-fcn if the list is not long enough.

(make-list length element)
Creates a list of the given length filled with the element specified.

(md5-final state)
Returns a byte array computed from the state, derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm. See rfc1321.txt. Example:
(define (md5 str)
    (let ((s (md5-init)))
    (md5-update s str)
    (array->hexstr (md5-final s))))

(md5-init)
Returns an md5 algoritm state as a byte array.

(md5-update state string length)
Performs the update step of the md5 algorithm using data from the string up to length, or length can be an open file object, in which case the data from the file is used to perform the update.

(member key list)
Returns the portion of the list where the car is equal to the key, or () if none found.

(memq key list)
Returns the portion of the list where the car is eq to the key, or () if none found.

(memv key list)
Returns the portion of the list where the car is eqv? to the key, or () if none found.

(mkdatref ctype ind)
Creates a closure functionally equivalent to (lambda (x) (datref x ctype ind)).

(nconc l1 l2)
Makes the cdr of the last cons of l1 point to l2.

(nreverse list)
Destructive reversal of the elements of a list using set-cdr!.

(number->string x base width precision)
Formats the number according to the base, which may be 8, 10, 16 or the symbol e or f. The width and precision are both optional.

(prin1 object stream)
Outputs the standard readable representation of the object to the stream, which defaults to the standard output.

(print object stream)
Same as prin1 followed by output of a newline.

(print-to-string object string no-trunc-flag)
Puts the readable representation of the object into the string, starting at the first character unless the no-trunc-flag is true, in which case the representation starts at the current length of the string.

(rand modulus)
Computes a random number from 0 to modulus-1. Uses C library rand.

(runtime)
Returns a list of containing the current cpu usage in seconds and the subset amount of cpu time that was spent performing garbage collection during the currently extant read-eval-print loop cycle.

set variable value)
A function that evaluates the variable name to select which variable to set, and evaluates the value form to get the value, and then assigns the value to the variable.

(set! variable value)
A special form that evaluates the value subform to get a value, and then assigns the value to the variable.

(set-car! cons-cell value)
Changes the car of the cons-cell object to point to the value.

(set-cdr! cons-cell value)
Changes the cdr of the cons-cell object to point to the value.

(sleep n)
Sleep for n seconds, where n may be fractional on some systems.

(strbreakup string sep)
Return a list of the portions of string indicated by the separator.
(strbreakup "x=y&z=3" "&") => ("x=y" "z=3")

(string->number str radix)
Converts the string to a number assuming the specified radix.

(string-append str1 str2 str3 ...)
Returns a new string which contains the concatenation of all its string arguments.

(string-downcase str)
Return a new string converting all the characters of str to lowercase.

(string-length str)
Returns the active string length of str.

(string-lessp str1 str2)
Return true if str1 is alphabetically less than str2.

(string-search key str)
Locate the index of the key in the specified string. Returns () if not found.

(string-trim str)
Return a new string made by trimming whitespace from the left and right of the specified string.

(string-trim-left str)
Like string-trim but only the left hand side.

(string-trim-right str)
Like string-trim but only the right hand side.

(string-upcase str)
Returns a new string with all the lowercase characters converted to uppercase.

(string? x)
Returns true if x is a string.

(strspn str indicators)
Returns the location of the first character in str which is not found in the indicators set, returns the length of the str if none found. For example:
(define (string-trim-left x)
    (substring x (strspn x " \t")))

(subset pred-fcn list)
Return the subset of the list such that the elements satisify the pred-fcn. For example:
(subset number? '(1 b 2 c)) => (1 2)


(substring str start end)
Returns a new string made up of the part of str begining at start and terminating at end. In other words, the new string has a length of end - start.

(substring-equal? str str2 start end)
An efficient way to determine if the substring of str2 specified by start and end is equal to str1.

(symbol-bound? symbol env)
Returns true of the symbol is bound in the environment.

(symbol-value symbol env)
Returns the value of the symbol in the environment.

(the-environment)
A special form which returns the interpreter environment structure for the current lexical scope.

(trunc x)
Returns the integer portion of x.

(typeof x)
Returns a symbol describing the type of the object x, or the integer type code.

(unbreakupstr list sep)
The reverse of strbreakup. The following example saves a list of lists as a tab delimited spreadsheet:
(define (save-spread-sheet filename data)
    (if (>= (verbose) 2)
    (writes nil ";; saving spread sheet " filename "\n"))
    (let ((result data)
    (f (and (not (equal? filename "-")) (fopen filename "w"))))
    (while result
    (writes f (unbreakupstr (car result) "\t") "\n")
    (set! result (cdr result)))
    (and f (fclose f))))

(url-decode str)
Performs the url decode operation on the str. See chtml.html for example usage.

(url-encode str)
Locates characters in the str which should not appear in a url, and returns a new string where they have been converted to the %NN hex representation. Spaces are converted to "+" signs.

(verbose arg)
Sets the verbosity level of SIOD to the specified level or returns the current level if not specified.
Verbose Level	Effect on System
0	No messages.
1	Error messages only.
2	Startup messages, prompts, and evaluation timing.
3	File loading and saving messages.
4 (default)	Garbage collection messages.
5	display of data loaded from files and fetched from databases.

(while pred-form form1 form2 ...)
If pred-form evaluates true it will evaluate all the other forms and then loop.




